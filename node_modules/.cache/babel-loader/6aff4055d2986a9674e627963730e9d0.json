{"ast":null,"code":"// import React, { Component } from 'react';\n// import { Map, GoogleApiWrapper, Marker, Polyline } from 'google-maps-react';\n// import DistanceButton from './distanceButton';\n\n// class HotelMap extends Component {\n//   constructor(props) {\n//     super(props);\n//     const storedHotelInfo = JSON.parse(localStorage.getItem('hotelInfo'));\n//     const latitude = storedHotelInfo && storedHotelInfo.hotelLocation ? storedHotelInfo.hotelLocation.latitude : undefined;\n//     const longitude = storedHotelInfo && storedHotelInfo.hotelLocation ? storedHotelInfo.hotelLocation.longitude : undefined;\n//     console.log('ffff', storedHotelInfo.hotelLocation)\n//     this.state = {\n//       currentPosition: null,\n//       hotelLocation: latitude !== undefined && longitude !== undefined\n//         ? {\n//           lat: parseFloat(latitude),\n//           lng: parseFloat(longitude),\n//         }\n//         : { lat: 0, lng: 0 },\n//       distance: null, // Add a distance state variable\n//       drivingTime: null,\n//       walkingTime: null,\n//     };\n//   }\n//   componentDidMount() {\n//     // const storedHotelInfo = JSON.parse(localStorage.getItem('hotelInfo'));\n\n//     // const { latitude, longitude } = storedHotelInfo;\n//     // console.log('latitude:', latitude, 'longitude:', longitude);\n\n//     // if (storedHotelInfo && latitude && longitude) {\n//     //   this.setState({\n//     //     hotelLocation: {\n//     //       lat: parseFloat('35.324700'),\n//     //       lng: parseFloat(''),\n//     //     },\n//     //   });\n//     // } else {\n//     //   console.error('Invalid hotel information in local storage.');\n//     // }\n//     if (navigator.geolocation) {\n//       navigator.geolocation.getCurrentPosition(\n//         position => {\n//           const { latitude, longitude } = position.coords;\n//           this.setState({\n//             currentPosition: { lat: latitude, lng: longitude },\n//           });\n\n//         },\n//         error => {\n//           console.error(error);\n//         }\n//       );\n//     } else {\n//       console.error(\"Geolocation is not supported by this browser.\");\n//     }\n//   }\n//   calculateDistance = () => {\n//     console.log('hiii')\n//     const { currentPosition, hotelLocation } = this.state;\n\n//     if (currentPosition && hotelLocation) {\n//       const radianConversion = Math.PI / 180;\n//       const lat1 = currentPosition.lat;\n//       const lon1 = currentPosition.lng;\n//       const lat2 = hotelLocation.lat;\n//       const lon2 = hotelLocation.lng;\n\n//       const R = 6371; // Radius of the Earth in kilometers\n//       const dLat = (lat2 - lat1) * radianConversion;\n//       const dLon = (lon2 - lon1) * radianConversion;\n\n//       const a =\n//         Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n//         Math.cos(lat1 * radianConversion) * Math.cos(lat2 * radianConversion) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n//       const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n//       const distance = R * c * 1000; // Distance in meters\n//       this.setState({\n//         distance: distance, // Update the distance state with calculated value\n//       });\n//       console.log(`Distance to hotel: ${distance} meters`);\n//     }\n//     const distanceService = new window.google.maps.DistanceMatrixService();\n//     distanceService.getDistanceMatrix(\n//       {\n//         origins: [currentPosition],\n//         destinations: [hotelLocation],\n//         travelMode: 'DRIVING', // You can also use 'WALKING'\n//         unitSystem: window.google.maps.UnitSystem.METRIC,\n//       },\n//       (response, status) => {\n//         if (status === 'OK') {\n//           const drivingTime = response.rows[0].elements[0].duration.text;\n//           this.setState({\n//             drivingTime: drivingTime,\n//           });\n//           console.log(`Driving time: ${drivingTime}`);\n//         } else {\n//           console.error('Error calculating driving time:', status);\n//         }\n//       }\n//     );\n//   };\n//   render() {\n//     const { hotelInfo } = this.props;\n//   const { currentPosition, hotelLocation, distance, drivingTime, walkingTime } = this.state;\n//   const storedHotelInfo = JSON.parse(localStorage.getItem('hotelInfo'));\n\n//   const polylinePath = [currentPosition, hotelLocation];\n//   return (\n//     <div style={{ position: 'relative', height: '600px', width: '1400px' }}>\n//     <Map\n//       google={this.props.google}\n//       initialCenter={currentPosition || { lat: 35.9202, lng: 74.3080 }}\n//       zoom={8}\n//     >\n//       {currentPosition && (\n//         <Marker\n//           position={currentPosition}\n//           label=\"You are here\"\n//         />\n//       )}\n//       {hotelLocation && hotelLocation.lat !== 0 && hotelLocation.lng !== 0 && (\n//         <Marker position={hotelLocation} label=\"Khunjerab Top\" />\n//       )}\n//       {currentPosition && hotelLocation.lat !== 0 && hotelLocation.lng !== 0 && (\n//         <Polyline\n//           path={polylinePath}\n//           geodesic={true}\n//           options={{\n//             strokeColor: \"#FF0000\",\n//             strokeOpacity: 1,\n//             strokeWeight: 2,\n//           }}\n//         />\n//       )}\n//       {distance && (\n//             <div style={{\n//               position: 'absolute',\n//               top: '300px',\n//               left: '500px',\n//               backgroundColor: 'white',\n//               padding: '5px',\n//               borderRadius: '5px',\n//               boxShadow: '0 2px 5px rgba(0, 0, 0, 0.3)',\n//             }}>\n//               Distance to Khunjerab Top: {distance.toFixed(2)/1000} km\n//             </div>\n//           )}\n//           {drivingTime && (\n//             <div>\n//               Driving time: {drivingTime}\n//             </div>\n//           )}\n//           {walkingTime && (\n//             <div>\n//               Walking time: {walkingTime}\n//             </div>\n//           )}\n//           </Map>\n//         <DistanceButton onClick={this.calculateDistance} />\n//       </div>\n//   );\n// }\n// }\n// export default GoogleApiWrapper({\n//   apiKey: 'AIzaSyC6xvlbMFrLYt9ExmJvyFnd5pawC_Al4rs',\n// })(HotelMap);","map":{"version":3,"names":[],"sources":["C:/Users/CL/Downloads/Tourist/Tourist/project/src/component/GoogleMap/GoogleMap.js"],"sourcesContent":["// import React, { Component } from 'react';\r\n// import { Map, GoogleApiWrapper, Marker, Polyline } from 'google-maps-react';\r\n// import DistanceButton from './distanceButton';\r\n\r\n// class HotelMap extends Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     const storedHotelInfo = JSON.parse(localStorage.getItem('hotelInfo'));\r\n//     const latitude = storedHotelInfo && storedHotelInfo.hotelLocation ? storedHotelInfo.hotelLocation.latitude : undefined;\r\n//     const longitude = storedHotelInfo && storedHotelInfo.hotelLocation ? storedHotelInfo.hotelLocation.longitude : undefined;\r\n//     console.log('ffff', storedHotelInfo.hotelLocation)\r\n//     this.state = {\r\n//       currentPosition: null,\r\n//       hotelLocation: latitude !== undefined && longitude !== undefined\r\n//         ? {\r\n//           lat: parseFloat(latitude),\r\n//           lng: parseFloat(longitude),\r\n//         }\r\n//         : { lat: 0, lng: 0 },\r\n//       distance: null, // Add a distance state variable\r\n//       drivingTime: null,\r\n//       walkingTime: null,\r\n//     };\r\n//   }\r\n//   componentDidMount() {\r\n//     // const storedHotelInfo = JSON.parse(localStorage.getItem('hotelInfo'));\r\n\r\n//     // const { latitude, longitude } = storedHotelInfo;\r\n//     // console.log('latitude:', latitude, 'longitude:', longitude);\r\n\r\n//     // if (storedHotelInfo && latitude && longitude) {\r\n//     //   this.setState({\r\n//     //     hotelLocation: {\r\n//     //       lat: parseFloat('35.324700'),\r\n//     //       lng: parseFloat(''),\r\n//     //     },\r\n//     //   });\r\n//     // } else {\r\n//     //   console.error('Invalid hotel information in local storage.');\r\n//     // }\r\n//     if (navigator.geolocation) {\r\n//       navigator.geolocation.getCurrentPosition(\r\n//         position => {\r\n//           const { latitude, longitude } = position.coords;\r\n//           this.setState({\r\n//             currentPosition: { lat: latitude, lng: longitude },\r\n//           });\r\n\r\n\r\n//         },\r\n//         error => {\r\n//           console.error(error);\r\n//         }\r\n//       );\r\n//     } else {\r\n//       console.error(\"Geolocation is not supported by this browser.\");\r\n//     }\r\n//   }\r\n//   calculateDistance = () => {\r\n//     console.log('hiii')\r\n//     const { currentPosition, hotelLocation } = this.state;\r\n\r\n//     if (currentPosition && hotelLocation) {\r\n//       const radianConversion = Math.PI / 180;\r\n//       const lat1 = currentPosition.lat;\r\n//       const lon1 = currentPosition.lng;\r\n//       const lat2 = hotelLocation.lat;\r\n//       const lon2 = hotelLocation.lng;\r\n\r\n//       const R = 6371; // Radius of the Earth in kilometers\r\n//       const dLat = (lat2 - lat1) * radianConversion;\r\n//       const dLon = (lon2 - lon1) * radianConversion;\r\n\r\n//       const a =\r\n//         Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n//         Math.cos(lat1 * radianConversion) * Math.cos(lat2 * radianConversion) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n//       const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n//       const distance = R * c * 1000; // Distance in meters\r\n//       this.setState({\r\n//         distance: distance, // Update the distance state with calculated value\r\n//       });\r\n//       console.log(`Distance to hotel: ${distance} meters`);\r\n//     }\r\n//     const distanceService = new window.google.maps.DistanceMatrixService();\r\n//     distanceService.getDistanceMatrix(\r\n//       {\r\n//         origins: [currentPosition],\r\n//         destinations: [hotelLocation],\r\n//         travelMode: 'DRIVING', // You can also use 'WALKING'\r\n//         unitSystem: window.google.maps.UnitSystem.METRIC,\r\n//       },\r\n//       (response, status) => {\r\n//         if (status === 'OK') {\r\n//           const drivingTime = response.rows[0].elements[0].duration.text;\r\n//           this.setState({\r\n//             drivingTime: drivingTime,\r\n//           });\r\n//           console.log(`Driving time: ${drivingTime}`);\r\n//         } else {\r\n//           console.error('Error calculating driving time:', status);\r\n//         }\r\n//       }\r\n//     );\r\n//   };\r\n//   render() {\r\n//     const { hotelInfo } = this.props;\r\n//   const { currentPosition, hotelLocation, distance, drivingTime, walkingTime } = this.state;\r\n//   const storedHotelInfo = JSON.parse(localStorage.getItem('hotelInfo'));\r\n\r\n//   const polylinePath = [currentPosition, hotelLocation];\r\n//   return (\r\n//     <div style={{ position: 'relative', height: '600px', width: '1400px' }}>\r\n//     <Map\r\n//       google={this.props.google}\r\n//       initialCenter={currentPosition || { lat: 35.9202, lng: 74.3080 }}\r\n//       zoom={8}\r\n//     >\r\n//       {currentPosition && (\r\n//         <Marker\r\n//           position={currentPosition}\r\n//           label=\"You are here\"\r\n//         />\r\n//       )}\r\n//       {hotelLocation && hotelLocation.lat !== 0 && hotelLocation.lng !== 0 && (\r\n//         <Marker position={hotelLocation} label=\"Khunjerab Top\" />\r\n//       )}\r\n//       {currentPosition && hotelLocation.lat !== 0 && hotelLocation.lng !== 0 && (\r\n//         <Polyline\r\n//           path={polylinePath}\r\n//           geodesic={true}\r\n//           options={{\r\n//             strokeColor: \"#FF0000\",\r\n//             strokeOpacity: 1,\r\n//             strokeWeight: 2,\r\n//           }}\r\n//         />\r\n//       )}\r\n//       {distance && (\r\n//             <div style={{\r\n//               position: 'absolute',\r\n//               top: '300px',\r\n//               left: '500px',\r\n//               backgroundColor: 'white',\r\n//               padding: '5px',\r\n//               borderRadius: '5px',\r\n//               boxShadow: '0 2px 5px rgba(0, 0, 0, 0.3)',\r\n//             }}>\r\n//               Distance to Khunjerab Top: {distance.toFixed(2)/1000} km\r\n//             </div>\r\n//           )}\r\n//           {drivingTime && (\r\n//             <div>\r\n//               Driving time: {drivingTime}\r\n//             </div>\r\n//           )}\r\n//           {walkingTime && (\r\n//             <div>\r\n//               Walking time: {walkingTime}\r\n//             </div>\r\n//           )}\r\n//           </Map>\r\n//         <DistanceButton onClick={this.calculateDistance} />\r\n//       </div>\r\n//   );\r\n// }\r\n// }\r\n// export default GoogleApiWrapper({\r\n//   apiKey: 'AIzaSyC6xvlbMFrLYt9ExmJvyFnd5pawC_Al4rs',\r\n// })(HotelMap);"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}