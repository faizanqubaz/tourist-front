{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CL\\\\Downloads\\\\Tourist\\\\Tourist\\\\project\\\\src\\\\component\\\\GoogleMap\\\\GoogleMap.js\";\n// import CurrentLocation from './CurrentLocation';\n// import React, { Component } from 'react';\n// import { Map, GoogleApiWrapper,InfoWindow,Marker } from 'google-maps-react';\n\n// export class MapContainer extends Component {\n//   render() {\n//     const { google, currentLocation } = this.props;\n// console.log('lll',currentLocation)\n//     return (\n//       <Map\n//         google={google}\n//         zoom={11}\n//         initialCenter={currentLocation}\n//         center={currentLocation}\n//       >\n//         <Marker  position={currentLocation} />\n//       </Map>\n//     );\n//   }\n// }\n\n// export default GoogleApiWrapper({\n//   apiKey: 'AIzaSyC6xvlbMFrLYt9ExmJvyFnd5pawC_Al4rs'\n// })(MapContainer);\n\nimport React, { Component } from 'react';\nimport { Map, GoogleApiWrapper, Marker, Polyline } from 'google-maps-react';\nimport DistanceButton from './distanceButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass HotelMap extends Component {\n  constructor(props) {\n    super(props);\n    this.calculateDistance = () => {\n      console.log('hiii');\n      const {\n        currentPosition,\n        hotelLocation\n      } = this.state;\n      if (currentPosition && hotelLocation) {\n        const radianConversion = Math.PI / 180;\n        const lat1 = currentPosition.lat;\n        const lon1 = currentPosition.lng;\n        const lat2 = hotelLocation.lat;\n        const lon2 = hotelLocation.lng;\n        const R = 6371; // Radius of the Earth in kilometers\n        const dLat = (lat2 - lat1) * radianConversion;\n        const dLon = (lon2 - lon1) * radianConversion;\n        const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * radianConversion) * Math.cos(lat2 * radianConversion) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n        const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n        const distance = R * c * 1000; // Distance in meters\n        this.setState({\n          distance: distance // Update the distance state with calculated value\n        });\n\n        console.log(`Distance to hotel: ${distance} meters`);\n      }\n    };\n    this.state = {\n      currentPosition: null,\n      hotelLocation: {\n        lat: 36.92388507655352,\n        lng: 75.3565647949157\n      },\n      distance: null // Add a distance state variable\n    };\n  }\n\n  componentDidMount() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const {\n          latitude,\n          longitude\n        } = position.coords;\n        this.setState({\n          currentPosition: {\n            lat: latitude,\n            lng: longitude\n          }\n        });\n      }, error => {\n        console.error(error);\n      });\n    } else {\n      console.error(\"Geolocation is not supported by this browser.\");\n    }\n  }\n  render() {\n    const {\n      currentPosition,\n      hotelLocation,\n      distance\n    } = this.state;\n    console.log('dis', distance);\n    // Create a polyline path using current and hotel positions\n    const polylinePath = [currentPosition, hotelLocation];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        height: '600px',\n        width: '1400px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Map, {\n        google: this.props.google,\n        initialCenter: this.state.hotelLocation,\n        zoom: 10,\n        children: [currentPosition && /*#__PURE__*/_jsxDEV(Marker, {\n          position: currentPosition,\n          label: \"You are here\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Marker, {\n          position: hotelLocation,\n          label: \"Khunjerab Top\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Polyline, {\n          path: polylinePath,\n          geodesic: true,\n          options: {\n            strokeColor: \"#FF0000\",\n            // Red line color\n            strokeOpacity: 1,\n            strokeWeight: 2\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 9\n        }, this), distance && /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            position: 'absolute',\n            top: '300px',\n            left: '500px',\n            backgroundColor: 'white',\n            padding: '5px',\n            borderRadius: '5px',\n            boxShadow: '0 2px 5px rgba(0, 0, 0, 0.3)'\n          },\n          children: [\"Distance to hotel: \", distance.toFixed(2) / 1000, \" km\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(DistanceButton, {\n        onClick: this.calculateDistance\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyC6xvlbMFrLYt9ExmJvyFnd5pawC_Al4rs'\n})(HotelMap);","map":{"version":3,"names":["React","Component","Map","GoogleApiWrapper","Marker","Polyline","DistanceButton","jsxDEV","_jsxDEV","HotelMap","constructor","props","calculateDistance","console","log","currentPosition","hotelLocation","state","radianConversion","Math","PI","lat1","lat","lon1","lng","lat2","lon2","R","dLat","dLon","a","sin","cos","c","atan2","sqrt","distance","setState","componentDidMount","navigator","geolocation","getCurrentPosition","position","latitude","longitude","coords","error","render","polylinePath","style","height","width","children","google","initialCenter","zoom","label","fileName","_jsxFileName","lineNumber","columnNumber","path","geodesic","options","strokeColor","strokeOpacity","strokeWeight","top","left","backgroundColor","padding","borderRadius","boxShadow","toFixed","onClick","apiKey"],"sources":["C:/Users/CL/Downloads/Tourist/Tourist/project/src/component/GoogleMap/GoogleMap.js"],"sourcesContent":["\r\n// import CurrentLocation from './CurrentLocation';\r\n// import React, { Component } from 'react';\r\n// import { Map, GoogleApiWrapper,InfoWindow,Marker } from 'google-maps-react';\r\n\r\n// export class MapContainer extends Component {\r\n//   render() {\r\n//     const { google, currentLocation } = this.props;\r\n// console.log('lll',currentLocation)\r\n//     return (\r\n//       <Map\r\n//         google={google}\r\n//         zoom={11}\r\n//         initialCenter={currentLocation}\r\n//         center={currentLocation}\r\n//       >\r\n//         <Marker  position={currentLocation} />\r\n//       </Map>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default GoogleApiWrapper({\r\n//   apiKey: 'AIzaSyC6xvlbMFrLYt9ExmJvyFnd5pawC_Al4rs'\r\n// })(MapContainer);\r\n\r\nimport React, { Component } from 'react';\r\nimport { Map, GoogleApiWrapper, Marker,Polyline } from 'google-maps-react';\r\nimport DistanceButton from './distanceButton';\r\n\r\nclass HotelMap extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      currentPosition: null,\r\n      hotelLocation: { lat: 36.92388507655352, lng: 75.3565647949157 },\r\n      distance: null, // Add a distance state variable\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        position => {\r\n          const { latitude, longitude } = position.coords;\r\n          this.setState({\r\n            currentPosition: { lat: latitude, lng: longitude },\r\n          });\r\n        },\r\n        error => {\r\n          console.error(error);\r\n        }\r\n      );\r\n    } else {\r\n      console.error(\"Geolocation is not supported by this browser.\");\r\n    }\r\n  }\r\n  calculateDistance = () => {\r\n    console.log('hiii')\r\n    const { currentPosition, hotelLocation } = this.state;\r\n\r\n    if (currentPosition && hotelLocation) {\r\n      const radianConversion = Math.PI / 180;\r\n      const lat1 = currentPosition.lat;\r\n      const lon1 = currentPosition.lng;\r\n      const lat2 = hotelLocation.lat;\r\n      const lon2 = hotelLocation.lng;\r\n  \r\n      const R = 6371; // Radius of the Earth in kilometers\r\n      const dLat = (lat2 - lat1) * radianConversion;\r\n      const dLon = (lon2 - lon1) * radianConversion;\r\n  \r\n      const a =\r\n        Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n        Math.cos(lat1 * radianConversion) * Math.cos(lat2 * radianConversion) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\r\n      const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n      const distance = R * c * 1000; // Distance in meters\r\n      this.setState({\r\n        distance: distance, // Update the distance state with calculated value\r\n      });\r\n      console.log(`Distance to hotel: ${distance} meters`);\r\n    }\r\n  };\r\n  render() {\r\n    const { currentPosition, hotelLocation, distance } = this.state;\r\nconsole.log('dis',distance)\r\n    // Create a polyline path using current and hotel positions\r\n    const polylinePath = [currentPosition, hotelLocation];\r\n    return (\r\n      <div style={{ position: 'relative', height: '600px', width: '1400px' }}>\r\n      <Map\r\n        google={this.props.google}\r\n        initialCenter={this.state.hotelLocation}\r\n        zoom={10}\r\n      >\r\n        {currentPosition && (\r\n          <Marker\r\n            position={currentPosition}\r\n            label=\"You are here\"\r\n          />\r\n        )}\r\n        <Marker\r\n          position={hotelLocation}\r\n          label=\"Khunjerab Top\"\r\n        />\r\n        <Polyline\r\n            path={polylinePath}\r\n            geodesic={true}\r\n            options={{\r\n              strokeColor: \"#FF0000\", // Red line color\r\n              strokeOpacity: 1,\r\n              strokeWeight: 2,\r\n            }}\r\n          />\r\n          {distance && (\r\n            <div style={{\r\n              position: 'absolute',\r\n              top: '300px',\r\n              left: '500px',\r\n              backgroundColor: 'white',\r\n              padding: '5px',\r\n              borderRadius: '5px',\r\n              boxShadow: '0 2px 5px rgba(0, 0, 0, 0.3)'\r\n              ,\r\n            }}>\r\n              Distance to hotel: {distance.toFixed(2)/1000} km\r\n            </div>\r\n          )}\r\n        </Map>\r\n        <DistanceButton onClick={this.calculateDistance} />\r\n        </div>\r\n    );\r\n  }\r\n}\r\nexport default GoogleApiWrapper({\r\n  apiKey: 'AIzaSyC6xvlbMFrLYt9ExmJvyFnd5pawC_Al4rs',\r\n})(HotelMap);"],"mappings":"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"},"metadata":{},"sourceType":"module"}